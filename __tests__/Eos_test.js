// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Eos = require("../src/Eos.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Eosjs = require("eosjs");
var Eos_Types = require("../src/Eos_Types.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

describe("Asset", (function () {
        Jest.test("fromString/toString", (function () {
                return Jest.Expect[/* toBe */2]("10.0000 SYS", Jest.Expect[/* expect */0](Eosjs.modules.format.printAsset(Eosjs.modules.format.parseAsset("10.0000 SYS"))));
              }));
        Jest.test("amount", (function () {
                return Jest.Expect[/* toBe */2]("10.0000", Jest.Expect[/* expect */0](Eosjs.modules.format.parseAsset("10.0000 EOS").amount));
              }));
        Jest.test("precision", (function () {
                return Jest.Expect[/* toBe */2](4, Jest.Expect[/* expect */0](Eosjs.modules.format.parseAsset("10.0000 EOS").precision));
              }));
        Jest.test("symbol", (function () {
                return Jest.Expect[/* toBe */2]("EOS", Jest.Expect[/* expect */0](Eosjs.modules.format.parseAsset("10.0000 EOS").symbol));
              }));
        Jest.test("decode", (function () {
                return Jest.Expect[/* toBe */2]("10.0000 EOS", Jest.Expect[/* expect */0](Eosjs.modules.format.printAsset(Eos_Types.Asset[/* decode */0]("10.0000 EOS"))));
              }));
        return Jest.test("encode", (function () {
                      return Jest.Expect[/* toBe */2]("10.0000 EOS", Jest.Expect[/* expect */0](Eos_Types.Asset[/* encode */1](Eosjs.modules.format.parseAsset("10.0000 EOS"))));
                    }));
      }));

var publicKey = "EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV";

var privateKey = "5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3";

describe("PublicKey", (function () {
        Jest.test("isValid with valid key", (function () {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Eosjs.modules.ecc.isValidPublic(publicKey)));
              }));
        return Jest.test("isValid with invalid key", (function () {
                      return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Eosjs.modules.ecc.isValidPublic("test")));
                    }));
      }));

describe("PrivateKey", (function () {
        Jest.test("isValid with valid key", (function () {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Eosjs.modules.ecc.isValidPrivate(privateKey)));
              }));
        Jest.test("isValid with invalid key", (function () {
                return Jest.Expect[/* toBe */2](false, Jest.Expect[/* expect */0](Eosjs.modules.ecc.isValidPrivate("test")));
              }));
        Jest.testPromise(10000, "random", (function () {
                return Eosjs.modules.ecc.randomKey().then((function (key) {
                              return Promise.resolve(Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Eos_Types.PrivateKey[/* isValid */6](key))));
                            }));
              }));
        return Jest.test("toPublic", (function () {
                      return Jest.Expect[/* toBe */2](publicKey, Jest.Expect[/* expect */0](Eos_Types.PublicKey[/* toString */4](Eos_Types.PrivateKey[/* toPublic */7](Eos_Types.PrivateKey[/* fromString */3](privateKey)))));
                    }));
      }));

describe("AccountName", (function () {
        describe("resultFromString", (function () {
                Jest.test("empty names", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["Empty string is not a name"]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("")));
                      }));
                Jest.test("all dots", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["Names must include characters other than dots"]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("..")));
                      }));
                Jest.test("capital letters", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["Invalid character: 'W'"]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("helloWORLD")));
                      }));
                Jest.test("more than 12 characters", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["A name can be up to 12 characters long"]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("1234512345123")));
                      }));
                Jest.test("numbers greater than 5", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["Invalid character: '6'"]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("qwerty6")));
                      }));
                return Jest.test("valid name", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [Eos_Types.AccountName[/* fromString */3]("hello")]), Jest.Expect[/* expect */0](Eos_Types.AccountName[/* resultFromString */6]("hello")));
                            }));
              }));
        return /* () */0;
      }));

var httpEndpoint = "http://api.eosnewyork.io";

var chainId = "aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906";

var eos = Eos.make(httpEndpoint, undefined, undefined, chainId, undefined, undefined, undefined, /* () */0);

describe("Info", (function () {
        return Jest.testPromise(10000, "get", (function () {
                      return Eos.getInfo(eos).then((function (info) {
                                    return Promise.resolve(Jest.Expect[/* toBeGreaterThan */5](6287534, Jest.Expect[/* expect */0](info[/* headBlockNum */1])));
                                  }));
                    }));
      }));

function lazyDecoder(json) {
  return json;
}

describe("TableRows", (function () {
        return Jest.testPromise(10000, "get", (function () {
                      return Eos.getTableRows(eos, lazyDecoder, Eos.accountName("eosio"), Eos.accountName("eosio"), Eos.tableName("producers"), undefined, undefined, undefined, undefined, undefined, /* () */0).then((function (tableRows) {
                                    return Promise.resolve(Jest.Expect[/* toBeGreaterThan */5](0, Jest.Expect[/* expect */0](tableRows[/* rows */0].length)));
                                  }));
                    }));
      }));

describe("Code", (function () {
        return Jest.testPromise(10000, "getCode", (function () {
                      return Eos.getCode(eos, Eos.accountName("eosio")).then((function (code) {
                                    return Promise.resolve(Jest.Expect[/* toEqual */12](/* tuple */[
                                                    "eosio",
                                                    true
                                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                                        Eos_Types.AccountName[/* toString */4](code[/* accountName */0]),
                                                        Belt_Option.isSome(code[/* abi */4])
                                                      ])));
                                  }));
                    }));
      }));

describe("BlockTimestamp", (function () {
        var json = "2018-07-17T19:47:20.500";
        Jest.test("decode", (function () {
                return Jest.Expect[/* toEqual */12]("2018-07-17T19:47:20.500Z", Jest.Expect[/* expect */0](Eos_Types.BlockTimestamp[/* toDate */4](Eos_Types.BlockTimestamp[/* decode */0](json)).toISOString()));
              }));
        return Jest.test("encode", (function () {
                      return Jest.Expect[/* toEqual */12](json, Jest.Expect[/* expect */0](Eos_Types.BlockTimestamp[/* encode */1](Eos_Types.BlockTimestamp[/* decode */0](json))));
                    }));
      }));

describe("TimePoint", (function () {
        var json = "1529459862123456";
        Jest.test("decode", (function () {
                return Jest.Expect[/* toEqual */12]("2018-06-20T01:57:42.123Z", Jest.Expect[/* expect */0](Eos_Types.TimePoint[/* toDate */4](Eos_Types.TimePoint[/* decode */0](json)).toISOString()));
              }));
        return Jest.test("encode", (function () {
                      return Jest.Expect[/* toEqual */12](json, Jest.Expect[/* expect */0](Eos_Types.TimePoint[/* encode */1](Eos_Types.TimePoint[/* decode */0](json))));
                    }));
      }));

var timeout = 10000;

exports.timeout = timeout;
exports.publicKey = publicKey;
exports.privateKey = privateKey;
exports.httpEndpoint = httpEndpoint;
exports.chainId = chainId;
exports.eos = eos;
exports.lazyDecoder = lazyDecoder;
/*  Not a pure module */
